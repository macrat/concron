name: CI

on:
  push:

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: 1.17.x
      - uses: actions/checkout@v2
      - name: Test
        run: make test

  analyze:
    name: CodeQL
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: github/codeql-action/init@v1
        with:
          languages: go
      - uses: github/codeql-action/analyze@v1

  release:
    name: Release
    needs: [test, analyze]
    if: "contains(github.ref, 'tags/v')"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: 1.17.x
      - uses: actions/checkout@v2
      - name: Install upx
        run: sudo apt install upx -y
      - uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build Docker
    needs: [test, analyze]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - uses: actions/checkout@v2
      - uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1
      - name: Login GitHub
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set version info
        id: version
        run: |
          echo "::set-output name=version::${GITHUB_REF##*/v}"
          echo "::set-output name=commit::$(git rev-parse --short HEAD)"

      - uses: docker/metadata-action@v3
        id: busybox
        with:
          images: ghcr.io/macrat/concron
          flavor: |
            latest=false
          tags: |
            type=ref,event=branch,prefix=busybox-
            type=ref,event=pr,prefix=busybox-
            type=semver,pattern={{version}},prefix=busybox-
            type=semver,pattern={{major}}.{{minor}},prefix=busybox-
            type=semver,pattern={{major}},prefix=busybox-
            type=raw,value=busybox,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
          labels: |
            org.opencontainers.image.description=Cron for Container with busybox.
      - uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ steps.busybox.outputs.tags }}
          labels: ${{ steps.busybox.outputs.labels }}
          build-args: |
            BASE_IMAGE=busybox:latest
            VERSION=${{ steps.version.outputs.version }}
            COMMIT=${{ steps.version.outputs.commit }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - uses: docker/metadata-action@v3
        id: docker
        with:
          images: ghcr.io/macrat/concron
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch,prefix=docker-
            type=ref,event=pr,prefix=docker-
            type=semver,pattern={{version}},prefix=docker-
            type=semver,pattern={{major}}.{{minor}},prefix=docker-
            type=semver,pattern={{major}},prefix=docker-
            type=raw,value=docker,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
          labels: |
            org.opencontainers.image.description=Cron for Container that includes Docker commands.
      - uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ steps.docker.outputs.tags }}
          labels: ${{ steps.docker.outputs.labels }}
          build-args: |
            BASE_IMAGE=docker:latest
            VERSION=${{ steps.version.outputs.version }}
            COMMIT=${{ steps.version.outputs.commit }}
          platforms: linux/amd64,linux/arm64/v8
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
